generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scopes            String[]
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  cid           String
  firstName     String?
  lastName      String?
  fullName      String?
  email         String?   @unique
  emailVerified DateTime?
  artcc         String
  rating        Int
  division      String

  logs Log[]

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VideoMap {
  id   String @id @default(cuid())
  name String @unique

  order Int @default(0)

  mappings MappingJson[]
}

model RadarFacility {
  id   String @id @default(cuid())
  name String @unique

  sectors SectorMapping[]

  order Int @default(0)
}

model SectorMapping {
  id               String @id @default(cuid())
  idsRadarSectorId String @unique

  name String

  radarFacility   RadarFacility @relation(fields: [radarFacilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  radarFacilityId String

  order Int @default(0)

  mappings MappingJson[]
}

model MappingJson {
  id String @id @default(cuid())

  jsonKey             String
  airspaceCondition   AirspaceCondition? @relation(fields: [airspaceConditionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  airspaceConditionId String?

  sectorMapping   SectorMapping? @relation(fields: [sectorMappingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sectorMappingId String?

  videoMap   VideoMap? @relation(fields: [videoMapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoMapId String?

  @@unique([sectorMappingId, videoMapId, airspaceConditionId])
}

model AirspaceConditionContainer {
  id         String              @id @default(cuid())
  name       String              @unique
  conditions AirspaceCondition[]

  order Int @default(0)
}

model AirspaceCondition {
  id String @id @default(cuid())

  name String

  container   AirspaceConditionContainer @relation(fields: [containerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  containerId String

  mappings MappingJson[]
}

enum LogType {
  CREATE
  UPDATE
  DELETE
}

enum LogModel {
  VIDEO_MAP
  SECTOR_MAPPING
  AIRSPACE_CONDITION_CONTAINER
  AIRSPACE_CONDITION
  RADAR_FACILITY
}

model Log {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  type      LogType
  model     LogModel
  message   String
  timestamp DateTime
  userId    String
}
